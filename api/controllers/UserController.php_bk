<?php
namespace api\controllers;
use yii;
use yii\rest\ActiveController;
use common\models\User;
use yii\filters\auth\CompositeAuth;
use yii\filters\auth\HttpBasicAuth;
use yii\filters\auth\HttpBearerAuth;
use yii\filters\auth\QueryParamAuth;
use api\models\LoginForm;
use yii\web\UploadedFile;
use yii\helpers\ArrayHelper;
use common\models\ArticleImage;
use yii\helpers\FileHelper;
use yii\imagine\Image;
use api\models\MultipleUploadForm;
use common\models\Article;
class UserController extends AppController {
    
 //public  $enableSession = false;
   public $modelClass = User::class;
   public function actions()
{
    $actions = parent::actions();
    // Overriding action
     unset($actions['delete'], $actions['create'],$actions['update'],$actions['view']);
    $actions['index']['prepareDataProvider'] = function($action) 
    {
       
        return new \yii\data\ActiveDataProvider([
           'query' => User::find()->andWhere(['id' => $this->users]),

        ]);
    };

    return $actions;
}

/*
public function checkAccess($action, $model = null, $params = [])
{
    // check if the user can access $action and $model
    // throw ForbiddenHttpException if access should be denied
    if ($action === 'update' || $action === 'delete') {
        if ($model->author_id !== \Yii::$app->user->id)
            throw new \yii\web\ForbiddenHttpException(sprintf('You can only %s articles that you\'ve created.', $action));
    }
}*/

public function behaviors()
{
    $behaviors = parent::behaviors();
   // unset($behaviors['authenticator']);
   /* $behaviors['contentNegotiator'] =  [
      'class' => \yii\ filters\ ContentNegotiator::className(),
     // 'only' => ['index', 'view','update','login'],
      'formats' => [
        'application/json' => \yii\ web\ Response::FORMAT_JSON,
      ],
    ];
    */
     $behaviors['authenticator'] = [
        'class' => CompositeAuth::className(),
        'except' => ['login'],
        'authMethods' => [
            HttpBasicAuth::className(),
            HttpBearerAuth::className(),
            QueryParamAuth::className(),
        ],
    ];
    /*
    $behaviors['authenticator'] = [
        'class' =>  HttpBearerAuth::className(),
        'except' => ['login','test','create'],
    ];
    */
    $behaviors['verbs'] = [
            'class' => yii\filters\VerbFilter::className(),
            'actions' => [
                'test' => ['GET','POST','OPTIONS'],
                'add' => ['GET','POST','OPTIONS'],
                'upload' => ['POST','OPTIONS'],
                'login'  => ['POST'],
              //  'index'  => ['GET'],
              //  'view'   => ['GET'],
                   'create' => ['POST','OPTIONS','GET'],
            //    'update' => ['GET', 'PUT', 'POST'],
              //  'delete' => ['POST', 'DELETE'],
                //'search' => ['GET']
            ],

        ];

    return $behaviors;
}
 public function actionTest(){
          return 1;
        }
public function actionImageMultipleUpload()
	{
		$form = new MultipleUploadForm();
		$filename = date('Y_m_d_His').gettimeofday()['usec'];
		$arrResponse = array();
		if (Yii::$app->request->isPost) {
           $form->files = UploadedFile::getInstances($form, 'files');
          
			if ($form->files && $form->validate()) {
                
				$arrResponse['url'] = array();
				$arrResponse['id'] = array();
							foreach ($form->files as $file) {
									$articleImage = new ArticleImage();
										
										$image_name = date('YmdHis') . gettimeofday()['usec'] . '.' . $file->extension;
										$articleImage->image = $image_name; 
										if ($articleImage->save(false)) {
												$path = Yii::$app->params['PathChannels']  . 'article/images/';
												$path745x510 = Yii::$app->params['PathChannels'] . 'article/745x510/';
												$path210X118 = Yii::$app->params['PathChannels'] . 'article/210x118/';
												$path200X200 = Yii::$app->params['PathChannels']  . 'article/200x200/';
												FileHelper::createDirectory($path, $mode = 0775, $recursive = true);
												FileHelper::createDirectory($path745x510, $mode = 0775, $recursive = true);
												FileHelper::createDirectory($path210X118, $mode = 0775, $recursive = true);
												FileHelper::createDirectory($path200X200, $mode = 0775, $recursive = true);
											if ($file->saveAs($path . $image_name, false)) {
													Image::thumbnail($path . $image_name, 745, 510)->save($path745x510 . $image_name, ['quality' => 100]);
													Image::thumbnail($path . $image_name, 210, 118)->save($path210X118 . $image_name, ['quality' => 100]);
													Image::thumbnail($path . $image_name, 200, 200)->save($path200X200 . $image_name, ['quality' => 100]);
											}
											$arrResponse['url'][] = $articleImage->image;
											$arrResponse['id'][] = $articleImage->id;
										}
							}
										$arrResponse['sID'] = implode(';', $arrResponse['id']);
										$arrResponse['total'] = count($form->files);
			}
		}
		return $arrResponse;
    	exit();
    }
    
       
    public function actionUpload()
	{
		$form = new \api\models\UploadForm();
		$filename = date('Y_m_d_His').gettimeofday()['usec'];
		if (Yii::$app->request->isPost) {
           $form->file = UploadedFile::getInstanceByName('file');// UploadedFile::getInstances($form, 'files');
         
			if ($form->file && $form->validate()) {
              
							$articleImage = new ArticleImage();
							$image_name = date('YmdHis') . gettimeofday()['usec'] . '.' . $form->file->extension;
							$articleImage->image = $image_name; 
										if ($articleImage->save(false)) {
												$path = Yii::$app->params['PathChannels']  . 'article/images/';
												$path745x510 = Yii::$app->params['PathChannels'] . 'article/745x510/';
												$path210X118 = Yii::$app->params['PathChannels'] . 'article/210x118/';
												$path200X200 = Yii::$app->params['PathChannels']  . 'article/200x200/';
												FileHelper::createDirectory($path, $mode = 0775, $recursive = true);
												FileHelper::createDirectory($path745x510, $mode = 0775, $recursive = true);
												FileHelper::createDirectory($path210X118, $mode = 0775, $recursive = true);
												FileHelper::createDirectory($path200X200, $mode = 0775, $recursive = true);
											if ($form->file->saveAs($path . $image_name, false)) {
													Image::thumbnail($path . $image_name, 745, 510)->save($path745x510 . $image_name, ['quality' => 100]);
													Image::thumbnail($path . $image_name, 210, 118)->save($path210X118 . $image_name, ['quality' => 100]);
													Image::thumbnail($path . $image_name, 200, 200)->save($path200X200 . $image_name, ['quality' => 100]);
                                            }
                                            return ['id'=> $articleImage->id,'image' => $articleImage->image];
											
										}
							}
										
			
		}
		  return ['id'=> 0,'image' => ''];
	}

   
     
    public function actionLogin()
    {
      
     
        $model = new LoginForm();
       if ($model->load(Yii::$app->request->post(), '') && $model->login()) {
          $user =   $model->login();
            return [
                'id' => $user->id,
                'token' => $user->access_token,
                'email' => $user->email,
                'password' => Yii::$app->request->post('password'),
                'firstName' => $user->name,
                'lastName' => $user->name,
                'username' => $user->name,
 
            ];
        } else {
            return $model->getFirstErrors();
        }
    }


  public function actionAdd(){
            $user = Yii::$app->user->identity;
            $article = new Article();
			if(Yii::$app->request->isPost){
				    $article->attributes =  Yii::$app->request->post('Article');
					$article->user_id= $user->id;
					$article->post_date= date('Y-m-d');
					$article->description = $article->content;
					$stringImageId= Yii::$app->request->post('upload_image_id');
					$arrTemp = !empty($stringImageId) ? explode(';', $stringImageId) : array(); 
					$arrTemp = array_unique($arrTemp); 
					if($article->save()){
						    // Image thumbnail
							foreach ($arrTemp as $image_id) {
								if(!empty($image_id)) {
									$articleImage = ArticleImage::findOne(['id' => $image_id]);
									$articleImage->article_id = $article->getPrimaryKey();
									$articleImage->save(false);
								}
							} 
							
                            $message="Cập nhập thành công!";
					} else {
						// Delete image upload on server and in DB
						foreach ($arrTemp as $image_id) {
							if(!empty($image_id)) {
								$articleImage = ArticleImage::findOne(['id' => $image_id]);
								if (!empty($articleImage)) {
										$user = Yii::$app->user->identity;
										$path = Yii::$app->params['PathChannels'] . ($user->code?$user->code:PseudoCrypt::hash($user->id)) . '/photos/articles/';
									$imgUrl =$path .$articleImage->image;
									$this->deleteFilesFolder($imgUrl);
									$articleImage->delete();
								}
							}
                        }
                          $message="Cập nhập không thành công!";
                    }
                    return [ 'message' => $message,'article' => $article];
                }
                return [ 'message' => $message,'article' => $article];
        
    }
     public function actionCreate(){
			$user ='12121';// Yii::$app->user->identity;
           // $article = new Article();
          return ['success' => true];
			if(Yii::$app->request->isPost){
				
					$article->attributes =  Yii::$app->request->post('Article');
					$article->user_id= $user->id;
					$article->post_date= date('Y-m-d');
					$article->description = $article->content;
					$stringImageId= Yii::$app->request->post('upload_image_id');
					$arrTemp = !empty($stringImageId) ? explode(';', $stringImageId) : array(); 
					$arrTemp = array_unique($arrTemp); 
					if($article->save()){
						    // Image thumbnail
							foreach ($arrTemp as $image_id) {
								if(!empty($image_id)) {
									$articleImage = ArticleImage::findOne(['id' => $image_id]);
									$articleImage->article_id = $article->getPrimaryKey();
									$articleImage->save(false);
								}
							} 
							Yii::$app->session->setFlash('success', "Cập nhập thành công");
							Yii::$app->getResponse()->redirect(['user/index','id' => $id]);
							Yii::$app->end();
						
					} else {
						// Delete image upload on server and in DB
						foreach ($arrTemp as $image_id) {
							if(!empty($image_id)) {
								$articleImage = ArticleImage::findOne(['id' => $image_id]);
								if (!empty($articleImage)) {
										$user = Yii::$app->user->identity;
										$path = Yii::$app->params['PathChannels'] . ($user->code?$user->code:PseudoCrypt::hash($user->id)) . '/photos/articles/';
									$imgUrl =$path .$articleImage->image;
									$this->deleteFilesFolder($imgUrl);
									$articleImage->delete();
								}
							}
						}
                    }
                    return true;
				}
		return false;
	}
  

	

}